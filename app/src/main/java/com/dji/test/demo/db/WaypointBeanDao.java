package com.dji.test.demo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dji.test.demo.bean.WaypointBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAYPOINT_BEAN".
*/
public class WaypointBeanDao extends AbstractDao<WaypointBean, Long> {

    public static final String TABLENAME = "WAYPOINT_BEAN";

    /**
     * Properties of entity WaypointBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "Uid", false, "UID");
        public final static Property Latitude = new Property(2, double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, double.class, "Longitude", false, "LONGITUDE");
        public final static Property DestinationHeight = new Property(4, float.class, "DestinationHeight", false, "DESTINATION_HEIGHT");
        public final static Property LocationAltitude = new Property(5, float.class, "LocationAltitude", false, "LOCATION_ALTITUDE");
        public final static Property HeadingModeString = new Property(6, String.class, "HeadingModeString", false, "HEADING_MODE_STRING");
        public final static Property PicPath = new Property(7, String.class, "picPath", false, "PIC_PATH");
    }


    public WaypointBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WaypointBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAYPOINT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" TEXT NOT NULL ," + // 1: Uid
                "\"LATITUDE\" REAL NOT NULL ," + // 2: Latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 3: Longitude
                "\"DESTINATION_HEIGHT\" REAL NOT NULL ," + // 4: DestinationHeight
                "\"LOCATION_ALTITUDE\" REAL NOT NULL ," + // 5: LocationAltitude
                "\"HEADING_MODE_STRING\" TEXT," + // 6: HeadingModeString
                "\"PIC_PATH\" TEXT);"); // 7: picPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAYPOINT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WaypointBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getDestinationHeight());
        stmt.bindDouble(6, entity.getLocationAltitude());
 
        String HeadingModeString = entity.getHeadingModeString();
        if (HeadingModeString != null) {
            stmt.bindString(7, HeadingModeString);
        }
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(8, picPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WaypointBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getDestinationHeight());
        stmt.bindDouble(6, entity.getLocationAltitude());
 
        String HeadingModeString = entity.getHeadingModeString();
        if (HeadingModeString != null) {
            stmt.bindString(7, HeadingModeString);
        }
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(8, picPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WaypointBean readEntity(Cursor cursor, int offset) {
        WaypointBean entity = new WaypointBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Uid
            cursor.getDouble(offset + 2), // Latitude
            cursor.getDouble(offset + 3), // Longitude
            cursor.getFloat(offset + 4), // DestinationHeight
            cursor.getFloat(offset + 5), // LocationAltitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // HeadingModeString
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // picPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WaypointBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setLatitude(cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setDestinationHeight(cursor.getFloat(offset + 4));
        entity.setLocationAltitude(cursor.getFloat(offset + 5));
        entity.setHeadingModeString(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPicPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WaypointBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WaypointBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WaypointBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
